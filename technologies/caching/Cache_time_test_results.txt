Intro: Cache performance is critical when working with large datasets 
    obtained from several iterations of the add_results() method. In some
    cases successive expansions of the existing cache result in severe
    slowing of system performance. To this end Jens has added the shaped 
    cache feature, which pre-allocates the memory for caching, avoiding the
    intensive process of cache expansion. To demonstrate and test this new
    feature, we have run 7 test cases to assess cache performance featuring
    contexts without cache, with the default cache, and pre-allocated cache
    enabled. We have also included variants which write to the regular SQLite
    database, or keep all data in memory. Lastly, these are compared to the
    DoNd functions which already pre-allocate cache size based on data shape.

Conclusions: 
    1-  Dynamically allocated cache underperforms in all cases.
    2-  DoNd with and without cache offer equivalent performance.
    3-  SQLite database writes do not hinder performance.

Reference:
1 - Measurement with context manager with cache                              
2 - Measurement with context manager with shaped cache                       
3 - Measurement with context manager without cache                           
4 - Measurement with context manager with cache, dataset in memory.          
5 - Measurement with context manager with shaped cache and dataset in memory.
6 - Measurement with doNd, iteration time estimated from total execution
7 - Measurement with doNd (nocache) iteration time estimated from total execution

Timed function: add_result() (exp 1-5), DoNd() (exp 6-7).

|                        Results		                        |
| n		| exp_1	| exp_2	| exp_3	| exp_4	| exp_5	| exp_6*| exp_7*|
| iter	| ----------- avg ms iter^-1 -------------------------- |
| 1		| 0.934	| 0.879	| 0.321	| 0.377	| 0.473	| 60.51 | 57.48 |
| 2		| 0.413	| 0.478	| 0.256	| 0.496	| 0.471	| 45.12 | 29.89 |
| 5		| 0.418	| 0.291	| 0.295	| 0.324	| 0.488	| 16.85 | 12.11 |
| 10	| 0.452	| 0.324	| 0.283	| 0.491	| 0.363	| 7.071 | 7.071 |
| 50	| 0.311	| 0.527	| 0.309	| 0.322	| 0.341	| 2.442	| 1.532	|
| 100	| 0.288	| 0.326	| 0.127	| 0.317	| 0.346	| 1.457 | 0.753 |
| 1000	| 0.257	| 0.217	| 0.125	| 0.209	| 0.214	| 0.319 | 0.269 |
| 10000	| 0.289	| 0.267	| 0.141	| 0.227	| 0.219	| 0.238 | 0.238 |
| 20000	| 0.287	| 0.252	| 0.126	| 0.262	| 0.217	| 0.247 | 0.227 |
| 50000	| 0.342	| 0.305	| 0.142	| 0.297	| 0.230	| 0.234 | 0.234 |
| 100000| 0.591	| 0.251	| 0.180	| 0.589	| 0.293	| 0.253 | 0.228 |
| 200000| 2.042	| 0.257	| 0.180	| 1.863	| 0.203	| 0.268	| 0.229	|
